# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type TerminalCommand {
  beforeExecution: Boolean
  command: String
}

type TerminalOutput {
  output: String
}

union TerminalElement = TerminalCommand | TerminalOutput

type NextActionTerminal {
  command: String
}

type NextActionManual {
  comment: String
}

union NextActionContent = NextActionTerminal | NextActionManual

type NextAction {
  content: NextActionContent
}

type TerminalNode {
  content: TerminalElement
}

type Terminal {
  name: String
  currentDirectory: String
  nodes: [TerminalNode] # To make frontend pattern-matching easier, we return a list of concrete object types, instead of list of unions
}

# experimental
type TerminalSimple {
  name: String
  currentDirectory: String
  elements: [TerminalOutput]
}

type FileHighlight {
  fromLine: Int
  toLine: Int
}

type OpenFile {
  filePath: String
  fileName: String
  content: String
  isFullContent: Boolean
  language: String
  highlight: [FileHighlight]
}

enum FileNodeType {
  FILE
  DIRECTORY
}

type FileNode {
  nodeType: FileNodeType
  name: String
  filePath: String
  offset: Int
  isUpdated: Boolean
}

type SourceCode {
  step: String
  fileTree: [FileNode]
  openFile(filePath: String): OpenFile
  defaultOpenFile: OpenFile
}

type PageState {
  step: String
  nextStep: String
  prevStep: String
  sourceCode: SourceCode
  terminals: [Terminal]
  nextAction: NextAction
}

type Query {
  # without passing step argument, you get the first step state
  pageState(step: String): PageState
}
