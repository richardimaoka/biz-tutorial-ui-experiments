# GraphQL schema example
#
# https://gqlgen.com/getting-started/

###################################################
# Top level types
###################################################

type Query {
  # without passing step argument, you get the first step page
  page(tutorial: String!, step: String): Page

  _test: TestObjs
}

type TestObjs {
  appTestTerminalPage(step: Int): TerminalColumn
  appTestTutorialColumnsPage: Page
  appTestTutorialTutorialPage: Page
  appTestSourcecodeFilecontentPage(step: Int!): OpenFile
}

###################################################
# Page
###################################################

type Page {
  step: String
  nextStep: String
  prevStep: String

  focusColumn: String

  isTrivial: Boolean

  modal: Modal

  columns: [ColumnWrapper]
}

###################################################
# Column
###################################################

type ColumnWrapper {
  column: Column!
  columnName: String!
  columnDisplayName: String
}

interface Column {
  _placeholder: String
}

type TerminalColumn implements Column {
  _placeholder: String
  terminals: [Terminal!]!
}

type SourceCodeColumn implements Column {
  _placeholder: String
  sourceCode: SourceCode!
}

type BrowserColumn implements Column {
  _placeholder: String
  browser: Browser!
}

###################################################
# Terminal related object types 2
###################################################

enum TerminalTooltipTiming {
  START
  END
}

type TerminalTooltip {
  markdownBody: String!
  timing: TerminalTooltipTiming
}

enum TerminalEntryType {
  COMMAND
  OUTPUT
}

type TerminalEntry {
  id: ID!
  entryType: TerminalEntryType!
  text: String! # command or output
}

type Terminal {
  name: String
  currentDirectory: String!
  entries: [TerminalEntry!]! # not null, no null eleement, but empty array is possible
  tooltip: TerminalTooltip
  # terminalTabs
}

###################################################
# Browser Column
###################################################

type Browser {
  width: Int!
  height: Int!
  path: String!
}

###################################################
# Source code related object types
###################################################

# Tooltip types

enum SourceCodeTooltipTiming {
  START
  END
}

type SourceCodeTooltip {
  markdownBody: String!
  lineNumber: Int!
  timing: SourceCodeTooltipTiming
}

# FileEdit types

type MonacoEditOperation {
  text: String!
  range: MonacoEditRange!
}

type EditSequence {
  id: ID!
  edits: [MonacoEditOperation!]
}

type MonacoEditRange {
  startLineNumber: Int!
  startColumn: Int!
  endLineNumber: Int!
  endColumn: Int!
}

# FileNode types

enum FileNodeType {
  FILE
  DIRECTORY
}

type FileNode {
  nodeType: FileNodeType!
  name: String
  filePath: String!
  offset: Int
  isUpdated: Boolean
  isDeleted: Boolean
}

# OpenFile types

# To be deprecated as Monaco Diff Editor will be used
type FileHighlight {
  fromLine: Int
  toLine: Int
}

type OpenFile {
  filePath: String
  fileName: String
  content: String
  oldContent: String
  isFullContent: Boolean
  language: String
  size: Float
  editSequence: EditSequence
  tooltip: SourceCodeTooltip

  # To be deprecated as Monaco Diff Editor will be used
  highlight: [FileHighlight]
}

# SourceCode type

type SourceCode {
  # step is necessary for the resolver to return step-specific OpenFile data
  step: String
  projectDir: String
  fileTree: [FileNode]
  isFoldFileTree: Boolean
  # If you don't pass `filePath` argument, you get the default OpenFile for the step
  openFile(filePath: String): OpenFile
}

###################################################
# Modal related object types
###################################################

type Modal {
  markdownBody: String
}
