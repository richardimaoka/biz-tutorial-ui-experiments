package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"log"

	"github.com/richardimaoka/biz-tutorial-ui-experiments/gqlgen/graph/model"
	"github.com/richardimaoka/biz-tutorial-ui-experiments/gqlgen/internal/jsonwrap"
)

// Page is the resolver for the page field.
func (r *queryResolver) Page(ctx context.Context, tutorial string, step *string) (*model.Page, error) {
	if !tutorialExists(tutorial) {
		return nil, fmt.Errorf("Page() error, '%s' is an invalid tutorial name", tutorial)
	}

	filename, err := stepFile(tutorial, step)
	if err != nil {
		log.Printf("Page() error, %s", err)
		return nil, fmt.Errorf("Internal Server Error")
	}
	log.Printf("reading data from %s", filename)

	var model model.Page
	err = jsonwrap.Read(filename, &model)
	if err != nil {
		log.Printf("Page() error, failed to read file = '%s', %s", filename, err)
		return nil, fmt.Errorf("Internal Server Error")
	}

	return &model, nil
}

// Test is the resolver for the _test field.
func (r *queryResolver) Test(ctx context.Context) (*model.TestObjs, error) {
	testObj := model.TestObjs{}
	return &testObj, nil
}

// OpenFile is the resolver for the openFile field.
func (r *sourceCodeResolver) OpenFile(ctx context.Context, obj *model.SourceCode, filePath *string) (*model.OpenFile, error) {
	var openFilePath string
	if filePath != nil {
		openFilePath = *filePath
	} else {
		openFilePath = obj.DefaultOpenFilePath
	}

	if openFilePath == "" {
		return nil, nil
	}

	openFile, ok := obj.FileContents[openFilePath]
	if !ok {
		return nil, fmt.Errorf("%s not found", openFilePath)
	}
	return &openFile, nil
}

// AppTestTerminalPage is the resolver for the appTestTerminalPage field.
func (r *testObjsResolver) AppTestTerminalPage(ctx context.Context, obj *model.TestObjs, step *int) (*model.TerminalColumn, error) {
	var filename string
	if step == nil {
		filename = "data/_test/appTestTerminalPage/1.json"
	} else {
		filename = fmt.Sprintf("data/_test/appTestTerminalPage/%d.json", *step)
	}

	var m model.TerminalColumn
	err := jsonwrap.Read(filename, &m)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// AppTestTutorialColumnsPage is the resolver for the appTestTutorialColumnsPage field.
func (r *testObjsResolver) AppTestTutorialColumnsPage(ctx context.Context, obj *model.TestObjs) (*model.Page, error) {
	var m model.Page
	err := jsonwrap.Read("data/_test/appTestTutorialColumnsPage.json", &m)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// AppTestTutorialTutorialPage is the resolver for the appTestTutorialTutorialPage field.
func (r *testObjsResolver) AppTestTutorialTutorialPage(ctx context.Context, obj *model.TestObjs) (*model.Page, error) {
	var m model.Page
	err := jsonwrap.Read("data/_test/appTestTutorialTutorialPage.json", &m)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// AppTestSourcecodeFilecontentPage is the resolver for the appTestSourcecodeFilecontentPage field.
func (r *testObjsResolver) AppTestSourcecodeFilecontentPage(ctx context.Context, obj *model.TestObjs, step int) (*model.OpenFile, error) {
	filename := fmt.Sprintf("data/_test/appTestSourcecodeFilecontentPage/%d.json", step)

	var m model.OpenFile
	err := jsonwrap.Read(filename, &m)
	if err != nil {
		return nil, err
	}

	return &m, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// SourceCode returns SourceCodeResolver implementation.
func (r *Resolver) SourceCode() SourceCodeResolver { return &sourceCodeResolver{r} }

// TestObjs returns TestObjsResolver implementation.
func (r *Resolver) TestObjs() TestObjsResolver { return &testObjsResolver{r} }

type queryResolver struct{ *Resolver }
type sourceCodeResolver struct{ *Resolver }
type testObjsResolver struct{ *Resolver }
