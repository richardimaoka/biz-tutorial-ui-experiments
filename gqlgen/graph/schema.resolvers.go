package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"reflect"
	"strconv"

	"github.com/richardimaoka/biz-tutorial-ui-experiments/gqlgen/graph/model"
)

// Step is the resolver for the step field.
func (r *queryResolver) Step(ctx context.Context, stepNum *int) (*model.Step, error) {
	filename := fmt.Sprintf("data/tutorial1/step%2d.json", stepNum)
	log.Printf("reading data from %s", filename)
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("stepNum = %d not found", *stepNum))
	}

	var step model.Step

	//TODO: Instead of loading everything in one shot, load non-Union and Union separately, and combine them
	err = json.Unmarshal(data, &step)
	if err != nil {
		log.Printf("ERROR: %s", err)
		return nil, errors.New("internal server error")
	}

	return &step, nil
}

// Terminal is the resolver for the terminal field.
func (r *queryResolver) Terminal(ctx context.Context) (*model.Terminal, error) {
	filename := "data/tutorial2/terminal.json"
	log.Printf("reading data from %s", filename)

	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("%s not found", filename))
	}

	var terminal model.Terminal

	err = json.Unmarshal(data, &terminal)
	if err != nil {
		log.Printf("ERROR: %s", err)
		return nil, errors.New("internal server error")
	}

	filename = "data/tutorial2/terminal_elements.json"
	log.Printf("reading data from %s", filename)

	data, err = os.ReadFile(filename)
	if err != nil {
		return nil, errors.New(fmt.Sprintf("%s not found", filename))
	}

	elements, err := GetTerminalElementSliceFromBytes(data)
	if err != nil {
		log.Printf("ERROR: %s", err)
		return nil, errors.New("internal server error")
	}

	terminal.Elements = elements

	for _, e := range terminal.Elements {
		switch t := e.(type) {
		case *model.TerminalCommand:
			log.Printf("%s", *t.Command)
		case *model.TerminalOutput:
			log.Printf("%s", *t.Output)
		default:
			log.Printf("defauot %v", t)
		}
	}

	return &terminal, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
func GetTerminalElementFromBytes(bytes []byte) (model.TerminalElement, error) {
	var unmarshaled interface{}
	if err := json.Unmarshal(bytes, &unmarshaled); err != nil {
		return nil, err
	}

	asserted, ok := unmarshaled.(map[string]interface{}) //type assertion
	if !ok {
		return nil, fmt.Errorf("perhaps the given JSON is not a JSON 'object'")
	}

	typename, ok := asserted["__typename"]
	if !ok {
		return nil, fmt.Errorf("\"__typename\" does not exist in JSON")
	}

	switch t := typename.(type) {
	case string:
		switch t {
		case "TerminalCommand":
			var cmd model.TerminalCommand
			if err := json.Unmarshal(bytes, &cmd); err != nil {
				return nil, err
			}
			return &cmd, nil

		case "TerminalOutput":
			var output model.TerminalOutput
			if err := json.Unmarshal(bytes, &output); err != nil {
				return nil, err
			}

			return &output, nil

		default:
			return nil, fmt.Errorf("\"__typename\" = %s is not a valid TerminalElement type", t)
		}
	default:
		return nil, fmt.Errorf("\"__typename\" = %v is in wrong type %v", t, reflect.TypeOf(t))
	}
}

func GetTerminalElementSliceFromBytes(bytes []byte) ([]model.TerminalElement, error) {
	var unmarshaled []map[string]interface{}
	if err := json.Unmarshal(bytes, &unmarshaled); err != nil {
		return nil, err
	}

	var elements []model.TerminalElement
	for i, r := range unmarshaled {
		elementBytes, err := json.Marshal(r)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal back %s result %s", ordinal(i), err)
		}
		result, err := GetTerminalElementFromBytes(elementBytes)
		if err != nil {
			return nil, fmt.Errorf("failed construct %s result, %s", ordinal(i), err)
		}
		elements = append(elements, result)
	}

	return elements, nil
}

func ordinal(x int) string {
	suffix := "th"
	switch x % 10 {
	case 1:
		if x%100 != 11 {
			suffix = "st"
		}
	case 2:
		if x%100 != 12 {
			suffix = "nd"
		}
	case 3:
		if x%100 != 13 {
			suffix = "rd"
		}
	}
	return strconv.Itoa(x) + suffix
}
func (r *queryResolver) TerminalElements(ctx context.Context, step *int) ([]model.TerminalElement, error) {
	panic(fmt.Errorf("not implemented: TerminalElements - terminalElements"))
}

type mutationResolver struct{ *Resolver }
