{
  "step": "016",
  "defaultOpenFile": null,
  "fileTree": [
    {
      "nodeType": "DIRECTORY",
      "name": "graph",
      "filePath": "graph",
      "offset": 0,
      "isUpdated": false
    },
    {
      "nodeType": "DIRECTORY",
      "name": "model",
      "filePath": "graph/model",
      "offset": 1,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "models_gen.go",
      "filePath": "graph/model/models_gen.go",
      "offset": 2,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "generated.go",
      "filePath": "graph/generated.go",
      "offset": 1,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "resolver.go",
      "filePath": "graph/resolver.go",
      "offset": 1,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "schema.graphqls",
      "filePath": "graph/schema.graphqls",
      "offset": 1,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "schema.resolvers.go",
      "filePath": "graph/schema.resolvers.go",
      "offset": 1,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "go.mod",
      "filePath": "go.mod",
      "offset": 0,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "go.sum",
      "filePath": "go.sum",
      "offset": 0,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "gqlgen.yml",
      "filePath": "gqlgen.yml",
      "offset": 0,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "middleware.go",
      "filePath": "middleware.go",
      "offset": 0,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "schema.graphql",
      "filePath": "schema.graphql",
      "offset": 0,
      "isUpdated": false
    },
    {
      "nodeType": "FILE",
      "name": "server.go",
      "filePath": "server.go",
      "offset": 0,
      "isUpdated": true
    },
    {
      "nodeType": "FILE",
      "name": "tools.go",
      "filePath": "tools.go",
      "offset": 0,
      "isUpdated": false
    }
  ],
  "fileContents": {
    "go.mod": {
      "filePath": "go.mod",
      "fileName": "go.mod",
      "content": "module github.com/richardimaoka/gqlgensandbox\n\ngo 1.18\n\nrequire (\n\tgithub.com/99designs/gqlgen v0.17.30\n\tgithub.com/vektah/gqlparser/v2 v2.5.1\n)\n\nrequire (\n\tgithub.com/agnivade/levenshtein v1.1.1 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/gorilla/websocket v1.5.0 // indirect\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.1 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/urfave/cli/v2 v2.24.4 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 // indirect\n\tgolang.org/x/mod v0.8.0 // indirect\n\tgolang.org/x/sys v0.5.0 // indirect\n\tgolang.org/x/text v0.7.0 // indirect\n\tgolang.org/x/tools v0.6.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n",
      "isFullContent": true,
      "language": null,
      "highlight": null
    },
    "go.sum": {
      "filePath": "go.sum",
      "fileName": "go.sum",
      "content": "github.com/99designs/gqlgen v0.17.30 h1:aRCHdy0mWZ41gdlHctJmR05bi3on3Alj4YNRMBZG5UA=\ngithub.com/99designs/gqlgen v0.17.30/go.mod h1:i4rEatMrzzu6RXaHydq1nmEPZkb3bKQsnxNRHS4DQB4=\ngithub.com/agnivade/levenshtein v1.0.1/go.mod h1:CURSv5d9Uaml+FovSIICkLbAUZ9S4RqaHDIsdSBg7lM=\ngithub.com/agnivade/levenshtein v1.1.1 h1:QY8M92nrzkmr798gCo3kmMyqXFzdQVpxLlGPRBij0P8=\ngithub.com/agnivade/levenshtein v1.1.1/go.mod h1:veldBMzWxcCG2ZvUTKD2kJNRdCk5hVbJomOvKkmgYbo=\ngithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883 h1:bvNMNQO63//z+xNgfBlViaCIJKLlCJ6/fmUseuG0wVQ=\ngithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=\ngithub.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0 h1:jfIu9sQUG6Ig+0+Ap1h4unLjW6YQJpKZVmUzxsD4E/Q=\ngithub.com/arbovm/levenshtein v0.0.0-20160628152529-48b4e1c0c4d0/go.mod h1:t2tdKJDJF9BV14lnkjHmOQgcvEKgtqs5a1N3LNdJhGE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dgryski/trifles v0.0.0-20200323201526-dd97f9abfb48 h1:fRzb/w+pyskVMQ+UbP35JkH8yB7MYb4q/qhBarqZE6g=\ngithub.com/dgryski/trifles v0.0.0-20200323201526-dd97f9abfb48/go.mod h1:if7Fbed8SFyPtHLHbg49SI7NAdJiC5WIA09pe59rfAA=\ngithub.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=\ngithub.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/hashicorp/golang-lru/v2 v2.0.1 h1:5pv5N1lT1fjLg2VQ5KWc7kmucp2x/kvFOnxuVTqZ6x4=\ngithub.com/hashicorp/golang-lru/v2 v2.0.1/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\ngithub.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=\ngithub.com/urfave/cli/v2 v2.24.4 h1:0gyJJEBYtCV87zI/x2nZCPyDxD51K6xM8SkwjHFCNEU=\ngithub.com/urfave/cli/v2 v2.24.4/go.mod h1:GHupkWPMM0M/sj1a2b4wUrWBPzazNrIjouW6fmdJLxc=\ngithub.com/vektah/gqlparser/v2 v2.5.1 h1:ZGu+bquAY23jsxDRcYpWjttRZrUz07LbiY77gUOHcr4=\ngithub.com/vektah/gqlparser/v2 v2.5.1/go.mod h1:mPgqFBu/woKTVYWyNk8cO3kh4S/f4aRFZrvOnp3hmCs=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 h1:bAn7/zixMGCfxrRTfdpNzjtPYqr8smhKouy9mxVdGPU=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=\ngolang.org/x/mod v0.8.0 h1:LUYupSeNrTNCGzR/hVBk2NHZO4hXcVaW1k4Qx7rjPx8=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\ngolang.org/x/sys v0.5.0 h1:MUK/U/4lj1t1oPg0HfuXDN/Z1wv31ZJ/YcPiGccS4DU=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/text v0.7.0 h1:4BRB4x83lYWy72KwLD/qYDuTu7q9PjSagHvijDw7cLo=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/tools v0.6.0 h1:BOw41kyTf3PuCW1pVQf8+Cyg8pMlkYB1oo9iJ6D/lKM=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n",
      "isFullContent": true,
      "language": null,
      "highlight": null
    },
    "gqlgen.yml": {
      "filePath": "gqlgen.yml",
      "fileName": "gqlgen.yml",
      "content": "# Where are all the schema files located? globs are supported eg  src/**/*.graphqls\nschema:\n  - graph/*.graphqls\n\n# Where should the generated server code go?\nexec:\n  filename: graph/generated.go\n  package: graph\n\n# Uncomment to enable federation\n# federation:\n#   filename: graph/federation.go\n#   package: graph\n\n# Where should any generated models go?\nmodel:\n  filename: graph/model/models_gen.go\n  package: model\n\n# Where should the resolver implementations go?\nresolver:\n  layout: follow-schema\n  dir: graph\n  package: graph\n\n# Optional: turn on use ` + \"`\" + `gqlgen:\"fieldName\"` + \"`\" + ` tags in your models\n# struct_tag: json\n\n# Optional: turn on to use []Thing instead of []*Thing\n# omit_slice_element_pointers: false\n\n# Optional: turn off to make struct-type struct fields not use pointers\n# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }\n# struct_fields_always_pointers: true\n\n# Optional: turn off to make resolvers return values instead of pointers for structs\n# resolvers_always_return_pointers: true\n\n# Optional: set to speed up generation time by not performing a final validation pass.\n# skip_validation: true\n\n# gqlgen will search for any type names in the schema in these go packages\n# if they match it will use them, otherwise it will generate them.\nautobind:\n#  - \"github.com/richardimaoka/gqlgensandbox/graph/model\"\n\n# This section declares type mapping between the GraphQL and go type systems\n#\n# The first line in each type will be used as defaults for resolver arguments and\n# modelgen, the others will be allowed when binding to fields. Configure them to\n# your liking\nmodels:\n  ID:\n    model:\n      - github.com/99designs/gqlgen/graphql.ID\n      - github.com/99designs/gqlgen/graphql.Int\n      - github.com/99designs/gqlgen/graphql.Int64\n      - github.com/99designs/gqlgen/graphql.Int32\n  Int:\n    model:\n      - github.com/99designs/gqlgen/graphql.Int\n      - github.com/99designs/gqlgen/graphql.Int64\n      - github.com/99designs/gqlgen/graphql.Int32\n",
      "isFullContent": true,
      "language": "yaml",
      "highlight": null
    },
    "graph/generated.go": {
      "filePath": "graph/generated.go",
      "fileName": "generated.go",
      "content": "// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.\n\npackage graph\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"embed\"\n\t\"errors\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\t\"github.com/99designs/gqlgen/graphql\"\n\t\"github.com/99designs/gqlgen/graphql/introspection\"\n\t\"github.com/richardimaoka/gqlgensandbox/graph/model\"\n\tgqlparser \"github.com/vektah/gqlparser/v2\"\n\t\"github.com/vektah/gqlparser/v2/ast\"\n)\n\n// region    ************************** generated!.gotpl **************************\n\n// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.\nfunc NewExecutableSchema(cfg Config) graphql.ExecutableSchema {\n\treturn \u0026executableSchema{\n\t\tresolvers:  cfg.Resolvers,\n\t\tdirectives: cfg.Directives,\n\t\tcomplexity: cfg.Complexity,\n\t}\n}\n\ntype Config struct {\n\tResolvers  ResolverRoot\n\tDirectives DirectiveRoot\n\tComplexity ComplexityRoot\n}\n\ntype ResolverRoot interface {\n\tMutation() MutationResolver\n\tQuery() QueryResolver\n}\n\ntype DirectiveRoot struct {\n}\n\ntype ComplexityRoot struct {\n\tMutation struct {\n\t\tCreateTodo func(childComplexity int, input model.NewTodo) int\n\t}\n\n\tQuery struct {\n\t\tTodos func(childComplexity int) int\n\t}\n\n\tTodo struct {\n\t\tDone func(childComplexity int) int\n\t\tID   func(childComplexity int) int\n\t\tText func(childComplexity int) int\n\t\tUser func(childComplexity int) int\n\t}\n\n\tUser struct {\n\t\tID   func(childComplexity int) int\n\t\tName func(childComplexity int) int\n\t}\n}\n\ntype MutationResolver interface {\n\tCreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error)\n}\ntype QueryResolver interface {\n\tTodos(ctx context.Context) ([]*model.Todo, error)\n}\n\ntype executableSchema struct {\n\tresolvers  ResolverRoot\n\tdirectives DirectiveRoot\n\tcomplexity ComplexityRoot\n}\n\nfunc (e *executableSchema) Schema() *ast.Schema {\n\treturn parsedSchema\n}\n\nfunc (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {\n\tec := executionContext{nil, e}\n\t_ = ec\n\tswitch typeName + \".\" + field {\n\n\tcase \"Mutation.createTodo\":\n\t\tif e.complexity.Mutation.CreateTodo == nil {\n\t\t\tbreak\n\t\t}\n\n\t\targs, err := ec.field_Mutation_createTodo_args(context.TODO(), rawArgs)\n\t\tif err != nil {\n\t\t\treturn 0, false\n\t\t}\n\n\t\treturn e.complexity.Mutation.CreateTodo(childComplexity, args[\"input\"].(model.NewTodo)), true\n\n\tcase \"Query.todos\":\n\t\tif e.complexity.Query.Todos == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Query.Todos(childComplexity), true\n\n\tcase \"Todo.done\":\n\t\tif e.complexity.Todo.Done == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.Done(childComplexity), true\n\n\tcase \"Todo.id\":\n\t\tif e.complexity.Todo.ID == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.ID(childComplexity), true\n\n\tcase \"Todo.text\":\n\t\tif e.complexity.Todo.Text == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.Text(childComplexity), true\n\n\tcase \"Todo.user\":\n\t\tif e.complexity.Todo.User == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.Todo.User(childComplexity), true\n\n\tcase \"User.id\":\n\t\tif e.complexity.User.ID == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.User.ID(childComplexity), true\n\n\tcase \"User.name\":\n\t\tif e.complexity.User.Name == nil {\n\t\t\tbreak\n\t\t}\n\n\t\treturn e.complexity.User.Name(childComplexity), true\n\n\t}\n\treturn 0, false\n}\n\nfunc (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {\n\trc := graphql.GetOperationContext(ctx)\n\tec := executionContext{rc, e}\n\tinputUnmarshalMap := graphql.BuildUnmarshalerMap(\n\t\tec.unmarshalInputNewTodo,\n\t)\n\tfirst := true\n\n\tswitch rc.Operation.Operation {\n\tcase ast.Query:\n\t\treturn func(ctx context.Context) *graphql.Response {\n\t\t\tif !first {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfirst = false\n\t\t\tctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)\n\t\t\tdata := ec._Query(ctx, rc.Operation.SelectionSet)\n\t\t\tvar buf bytes.Buffer\n\t\t\tdata.MarshalGQL(\u0026buf)\n\n\t\t\treturn \u0026graphql.Response{\n\t\t\t\tData: buf.Bytes(),\n\t\t\t}\n\t\t}\n\tcase ast.Mutation:\n\t\treturn func(ctx context.Context) *graphql.Response {\n\t\t\tif !first {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tfirst = false\n\t\t\tctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)\n\t\t\tdata := ec._Mutation(ctx, rc.Operation.SelectionSet)\n\t\t\tvar buf bytes.Buffer\n\t\t\tdata.MarshalGQL(\u0026buf)\n\n\t\t\treturn \u0026graphql.Response{\n\t\t\t\tData: buf.Bytes(),\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\treturn graphql.OneShot(graphql.ErrorResponse(ctx, \"unsupported GraphQL operation\"))\n\t}\n}\n\ntype executionContext struct {\n\t*graphql.OperationContext\n\t*executableSchema\n}\n\nfunc (ec *executionContext) introspectSchema() (*introspection.Schema, error) {\n\tif ec.DisableIntrospection {\n\t\treturn nil, errors.New(\"introspection disabled\")\n\t}\n\treturn introspection.WrapSchema(parsedSchema), nil\n}\n\nfunc (ec *executionContext) introspectType(name string) (*introspection.Type, error) {\n\tif ec.DisableIntrospection {\n\t\treturn nil, errors.New(\"introspection disabled\")\n\t}\n\treturn introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil\n}\n\n//go:embed \"schema.graphqls\"\nvar sourcesFS embed.FS\n\nfunc sourceData(filename string) string {\n\tdata, err := sourcesFS.ReadFile(filename)\n\tif err != nil {\n\t\tpanic(fmt.Sprintf(\"codegen problem: %s not available\", filename))\n\t}\n\treturn string(data)\n}\n\nvar sources = []*ast.Source{\n\t{Name: \"schema.graphqls\", Input: sourceData(\"schema.graphqls\"), BuiltIn: false},\n}\nvar parsedSchema = gqlparser.MustLoadSchema(sources...)\n\n// endregion ************************** generated!.gotpl **************************\n\n// region    ***************************** args.gotpl *****************************\n\nfunc (ec *executionContext) field_Mutation_createTodo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {\n\tvar err error\n\targs := map[string]interface{}{}\n\tvar arg0 model.NewTodo\n\tif tmp, ok := rawArgs[\"input\"]; ok {\n\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"input\"))\n\t\targ0, err = ec.unmarshalNNewTodo2githubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐNewTodo(ctx, tmp)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\targs[\"input\"] = arg0\n\treturn args, nil\n}\n\nfunc (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {\n\tvar err error\n\targs := map[string]interface{}{}\n\tvar arg0 string\n\tif tmp, ok := rawArgs[\"name\"]; ok {\n\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"name\"))\n\t\targ0, err = ec.unmarshalNString2string(ctx, tmp)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\targs[\"name\"] = arg0\n\treturn args, nil\n}\n\nfunc (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {\n\tvar err error\n\targs := map[string]interface{}{}\n\tvar arg0 bool\n\tif tmp, ok := rawArgs[\"includeDeprecated\"]; ok {\n\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"includeDeprecated\"))\n\t\targ0, err = ec.unmarshalOBoolean2bool(ctx, tmp)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\targs[\"includeDeprecated\"] = arg0\n\treturn args, nil\n}\n\nfunc (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {\n\tvar err error\n\targs := map[string]interface{}{}\n\tvar arg0 bool\n\tif tmp, ok := rawArgs[\"includeDeprecated\"]; ok {\n\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"includeDeprecated\"))\n\t\targ0, err = ec.unmarshalOBoolean2bool(ctx, tmp)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\targs[\"includeDeprecated\"] = arg0\n\treturn args, nil\n}\n\n// endregion ***************************** args.gotpl *****************************\n\n// region    ************************** directives.gotpl **************************\n\n// endregion ************************** directives.gotpl **************************\n\n// region    **************************** field.gotpl *****************************\n\nfunc (ec *executionContext) _Mutation_createTodo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Mutation_createTodo(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.resolvers.Mutation().CreateTodo(rctx, fc.Args[\"input\"].(model.NewTodo))\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*model.Todo)\n\tfc.Result = res\n\treturn ec.marshalNTodo2ᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐTodo(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Mutation_createTodo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Mutation\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: true,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"id\":\n\t\t\t\treturn ec.fieldContext_Todo_id(ctx, field)\n\t\t\tcase \"text\":\n\t\t\t\treturn ec.fieldContext_Todo_text(ctx, field)\n\t\t\tcase \"done\":\n\t\t\t\treturn ec.fieldContext_Todo_done(ctx, field)\n\t\t\tcase \"user\":\n\t\t\t\treturn ec.fieldContext_Todo_user(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type Todo\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field_Mutation_createTodo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Query_todos(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Query_todos(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.resolvers.Query().Todos(rctx)\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]*model.Todo)\n\tfc.Result = res\n\treturn ec.marshalNTodo2ᚕᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐTodoᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Query_todos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Query\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: true,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"id\":\n\t\t\t\treturn ec.fieldContext_Todo_id(ctx, field)\n\t\t\tcase \"text\":\n\t\t\t\treturn ec.fieldContext_Todo_text(ctx, field)\n\t\t\tcase \"done\":\n\t\t\t\treturn ec.fieldContext_Todo_done(ctx, field)\n\t\t\tcase \"user\":\n\t\t\t\treturn ec.fieldContext_Todo_user(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type Todo\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Query___type(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.introspectType(fc.Args[\"name\"].(string))\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Query\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Query___schema(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn ec.introspectSchema()\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Schema)\n\tfc.Result = res\n\treturn ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Query\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Schema_description(ctx, field)\n\t\t\tcase \"types\":\n\t\t\t\treturn ec.fieldContext___Schema_types(ctx, field)\n\t\t\tcase \"queryType\":\n\t\t\t\treturn ec.fieldContext___Schema_queryType(ctx, field)\n\t\t\tcase \"mutationType\":\n\t\t\t\treturn ec.fieldContext___Schema_mutationType(ctx, field)\n\t\t\tcase \"subscriptionType\":\n\t\t\t\treturn ec.fieldContext___Schema_subscriptionType(ctx, field)\n\t\t\tcase \"directives\":\n\t\t\t\treturn ec.fieldContext___Schema_directives(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Schema\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Todo_id(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_id(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.ID, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNID2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Todo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type ID does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Todo_text(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_text(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Text, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Todo_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Todo_done(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_done(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Done, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Todo_done(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _Todo_user(ctx context.Context, field graphql.CollectedField, obj *model.Todo) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_Todo_user(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.User, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*model.User)\n\tfc.Result = res\n\treturn ec.marshalNUser2ᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_Todo_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"Todo\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"id\":\n\t\t\t\treturn ec.fieldContext_User_id(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext_User_name(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type User\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_User_id(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.ID, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNID2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"User\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type ID does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext_User_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"User\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_locations(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Locations, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]string)\n\tfc.Result = res\n\treturn ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type __DirectiveLocation does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_args(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Args, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.InputValue)\n\tfc.Result = res\n\treturn ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___InputValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___InputValue_description(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___InputValue_type(ctx, field)\n\t\t\tcase \"defaultValue\":\n\t\t\t\treturn ec.fieldContext___InputValue_defaultValue(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __InputValue\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsRepeatable, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Directive\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsDeprecated(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DeprecationReason(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__EnumValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_args(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Args, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.InputValue)\n\tfc.Result = res\n\treturn ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___InputValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___InputValue_description(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___InputValue_type(ctx, field)\n\t\t\tcase \"defaultValue\":\n\t\t\t\treturn ec.fieldContext___InputValue_defaultValue(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __InputValue\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_type(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Type, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_isDeprecated(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.IsDeprecated(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(bool)\n\tfc.Result = res\n\treturn ec.marshalNBoolean2bool(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type Boolean does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Field_deprecationReason(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DeprecationReason(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Field\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalNString2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_type(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Type, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.DefaultValue, nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__InputValue\",\n\t\tField:      field,\n\t\tIsMethod:   false,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_types(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Types(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_queryType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.QueryType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_mutationType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.MutationType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.SubscriptionType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Schema_directives(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Directives(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Directive)\n\tfc.Result = res\n\treturn ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Schema\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Directive_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Directive_description(ctx, field)\n\t\t\tcase \"locations\":\n\t\t\t\treturn ec.fieldContext___Directive_locations(ctx, field)\n\t\t\tcase \"args\":\n\t\t\t\treturn ec.fieldContext___Directive_args(ctx, field)\n\t\t\tcase \"isRepeatable\":\n\t\t\t\treturn ec.fieldContext___Directive_isRepeatable(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Directive\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_kind(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Kind(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\tif !graphql.HasFieldError(ctx, fc) {\n\t\t\tec.Errorf(ctx, \"must not be null\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(string)\n\tfc.Result = res\n\treturn ec.marshalN__TypeKind2string(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type __TypeKind does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_name(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Name(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_description(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Description(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_fields(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Fields(fc.Args[\"includeDeprecated\"].(bool)), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Field)\n\tfc.Result = res\n\treturn ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Field_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Field_description(ctx, field)\n\t\t\tcase \"args\":\n\t\t\t\treturn ec.fieldContext___Field_args(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___Field_type(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___Field_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___Field_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Field\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_interfaces(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.Interfaces(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_possibleTypes(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.PossibleTypes(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_enumValues(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.EnumValues(fc.Args[\"includeDeprecated\"].(bool)), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.EnumValue)\n\tfc.Result = res\n\treturn ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___EnumValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___EnumValue_description(ctx, field)\n\t\t\tcase \"isDeprecated\":\n\t\t\t\treturn ec.fieldContext___EnumValue_isDeprecated(ctx, field)\n\t\t\tcase \"deprecationReason\":\n\t\t\t\treturn ec.fieldContext___EnumValue_deprecationReason(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __EnumValue\", field.Name)\n\t\t},\n\t}\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\terr = ec.Recover(ctx, r)\n\t\t\tec.Error(ctx, err)\n\t\t}\n\t}()\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tif fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_inputFields(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.InputFields(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.([]introspection.InputValue)\n\tfc.Result = res\n\treturn ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___InputValue_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___InputValue_description(ctx, field)\n\t\t\tcase \"type\":\n\t\t\t\treturn ec.fieldContext___InputValue_type(ctx, field)\n\t\t\tcase \"defaultValue\":\n\t\t\t\treturn ec.fieldContext___InputValue_defaultValue(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __InputValue\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_ofType(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.OfType(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*introspection.Type)\n\tfc.Result = res\n\treturn ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\tswitch field.Name {\n\t\t\tcase \"kind\":\n\t\t\t\treturn ec.fieldContext___Type_kind(ctx, field)\n\t\t\tcase \"name\":\n\t\t\t\treturn ec.fieldContext___Type_name(ctx, field)\n\t\t\tcase \"description\":\n\t\t\t\treturn ec.fieldContext___Type_description(ctx, field)\n\t\t\tcase \"fields\":\n\t\t\t\treturn ec.fieldContext___Type_fields(ctx, field)\n\t\t\tcase \"interfaces\":\n\t\t\t\treturn ec.fieldContext___Type_interfaces(ctx, field)\n\t\t\tcase \"possibleTypes\":\n\t\t\t\treturn ec.fieldContext___Type_possibleTypes(ctx, field)\n\t\t\tcase \"enumValues\":\n\t\t\t\treturn ec.fieldContext___Type_enumValues(ctx, field)\n\t\t\tcase \"inputFields\":\n\t\t\t\treturn ec.fieldContext___Type_inputFields(ctx, field)\n\t\t\tcase \"ofType\":\n\t\t\t\treturn ec.fieldContext___Type_ofType(ctx, field)\n\t\t\tcase \"specifiedByURL\":\n\t\t\t\treturn ec.fieldContext___Type_specifiedByURL(ctx, field)\n\t\t\t}\n\t\t\treturn nil, fmt.Errorf(\"no field named %q was found under type __Type\", field.Name)\n\t\t},\n\t}\n\treturn fc, nil\n}\n\nfunc (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {\n\tfc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)\n\tif err != nil {\n\t\treturn graphql.Null\n\t}\n\tctx = graphql.WithFieldContext(ctx, fc)\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\tret = graphql.Null\n\t\t}\n\t}()\n\tresTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {\n\t\tctx = rctx // use context from middleware stack in children\n\t\treturn obj.SpecifiedByURL(), nil\n\t})\n\tif err != nil {\n\t\tec.Error(ctx, err)\n\t\treturn graphql.Null\n\t}\n\tif resTmp == nil {\n\t\treturn graphql.Null\n\t}\n\tres := resTmp.(*string)\n\tfc.Result = res\n\treturn ec.marshalOString2ᚖstring(ctx, field.Selections, res)\n}\n\nfunc (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {\n\tfc = \u0026graphql.FieldContext{\n\t\tObject:     \"__Type\",\n\t\tField:      field,\n\t\tIsMethod:   true,\n\t\tIsResolver: false,\n\t\tChild: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {\n\t\t\treturn nil, errors.New(\"field of type String does not have child fields\")\n\t\t},\n\t}\n\treturn fc, nil\n}\n\n// endregion **************************** field.gotpl *****************************\n\n// region    **************************** input.gotpl *****************************\n\nfunc (ec *executionContext) unmarshalInputNewTodo(ctx context.Context, obj interface{}) (model.NewTodo, error) {\n\tvar it model.NewTodo\n\tasMap := map[string]interface{}{}\n\tfor k, v := range obj.(map[string]interface{}) {\n\t\tasMap[k] = v\n\t}\n\n\tfieldsInOrder := [...]string{\"text\", \"userId\"}\n\tfor _, k := range fieldsInOrder {\n\t\tv, ok := asMap[k]\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tswitch k {\n\t\tcase \"text\":\n\t\t\tvar err error\n\n\t\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"text\"))\n\t\t\tit.Text, err = ec.unmarshalNString2string(ctx, v)\n\t\t\tif err != nil {\n\t\t\t\treturn it, err\n\t\t\t}\n\t\tcase \"userId\":\n\t\t\tvar err error\n\n\t\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithField(\"userId\"))\n\t\t\tit.UserID, err = ec.unmarshalNString2string(ctx, v)\n\t\t\tif err != nil {\n\t\t\t\treturn it, err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn it, nil\n}\n\n// endregion **************************** input.gotpl *****************************\n\n// region    ************************** interface.gotpl ***************************\n\n// endregion ************************** interface.gotpl ***************************\n\n// region    **************************** object.gotpl ****************************\n\nvar mutationImplementors = []string{\"Mutation\"}\n\nfunc (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)\n\tctx = graphql.WithFieldContext(ctx, \u0026graphql.FieldContext{\n\t\tObject: \"Mutation\",\n\t})\n\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tinnerCtx := graphql.WithRootFieldContext(ctx, \u0026graphql.RootFieldContext{\n\t\t\tObject: field.Name,\n\t\t\tField:  field,\n\t\t})\n\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"Mutation\")\n\t\tcase \"createTodo\":\n\n\t\t\tout.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\treturn ec._Mutation_createTodo(ctx, field)\n\t\t\t})\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar queryImplementors = []string{\"Query\"}\n\nfunc (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)\n\tctx = graphql.WithFieldContext(ctx, \u0026graphql.FieldContext{\n\t\tObject: \"Query\",\n\t})\n\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tinnerCtx := graphql.WithRootFieldContext(ctx, \u0026graphql.RootFieldContext{\n\t\t\tObject: field.Name,\n\t\t\tField:  field,\n\t\t})\n\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"Query\")\n\t\tcase \"todos\":\n\t\t\tfield := field\n\n\t\t\tinnerFunc := func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\tdefer func() {\n\t\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\t}\n\t\t\t\t}()\n\t\t\t\tres = ec._Query_todos(ctx, field)\n\t\t\t\tif res == graphql.Null {\n\t\t\t\t\tatomic.AddUint32(\u0026invalids, 1)\n\t\t\t\t}\n\t\t\t\treturn res\n\t\t\t}\n\n\t\t\trrm := func(ctx context.Context) graphql.Marshaler {\n\t\t\t\treturn ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)\n\t\t\t}\n\n\t\t\tout.Concurrently(i, func() graphql.Marshaler {\n\t\t\t\treturn rrm(innerCtx)\n\t\t\t})\n\t\tcase \"__type\":\n\n\t\t\tout.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\treturn ec._Query___type(ctx, field)\n\t\t\t})\n\n\t\tcase \"__schema\":\n\n\t\t\tout.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {\n\t\t\t\treturn ec._Query___schema(ctx, field)\n\t\t\t})\n\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar todoImplementors = []string{\"Todo\"}\n\nfunc (ec *executionContext) _Todo(ctx context.Context, sel ast.SelectionSet, obj *model.Todo) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, todoImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"Todo\")\n\t\tcase \"id\":\n\n\t\t\tout.Values[i] = ec._Todo_id(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"text\":\n\n\t\t\tout.Values[i] = ec._Todo_text(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"done\":\n\n\t\t\tout.Values[i] = ec._Todo_done(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"user\":\n\n\t\t\tout.Values[i] = ec._Todo_user(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar userImplementors = []string{\"User\"}\n\nfunc (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"User\")\n\t\tcase \"id\":\n\n\t\t\tout.Values[i] = ec._User_id(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"name\":\n\n\t\t\tout.Values[i] = ec._User_name(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar __DirectiveImplementors = []string{\"__Directive\"}\n\nfunc (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Directive\")\n\t\tcase \"name\":\n\n\t\t\tout.Values[i] = ec.___Directive_name(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"description\":\n\n\t\t\tout.Values[i] = ec.___Directive_description(ctx, field, obj)\n\n\t\tcase \"locations\":\n\n\t\t\tout.Values[i] = ec.___Directive_locations(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"args\":\n\n\t\t\tout.Values[i] = ec.___Directive_args(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"isRepeatable\":\n\n\t\t\tout.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar __EnumValueImplementors = []string{\"__EnumValue\"}\n\nfunc (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__EnumValue\")\n\t\tcase \"name\":\n\n\t\t\tout.Values[i] = ec.___EnumValue_name(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"description\":\n\n\t\t\tout.Values[i] = ec.___EnumValue_description(ctx, field, obj)\n\n\t\tcase \"isDeprecated\":\n\n\t\t\tout.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"deprecationReason\":\n\n\t\t\tout.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)\n\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar __FieldImplementors = []string{\"__Field\"}\n\nfunc (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Field\")\n\t\tcase \"name\":\n\n\t\t\tout.Values[i] = ec.___Field_name(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"description\":\n\n\t\t\tout.Values[i] = ec.___Field_description(ctx, field, obj)\n\n\t\tcase \"args\":\n\n\t\t\tout.Values[i] = ec.___Field_args(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"type\":\n\n\t\t\tout.Values[i] = ec.___Field_type(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"isDeprecated\":\n\n\t\t\tout.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"deprecationReason\":\n\n\t\t\tout.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)\n\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar __InputValueImplementors = []string{\"__InputValue\"}\n\nfunc (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__InputValue\")\n\t\tcase \"name\":\n\n\t\t\tout.Values[i] = ec.___InputValue_name(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"description\":\n\n\t\t\tout.Values[i] = ec.___InputValue_description(ctx, field, obj)\n\n\t\tcase \"type\":\n\n\t\t\tout.Values[i] = ec.___InputValue_type(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"defaultValue\":\n\n\t\t\tout.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)\n\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar __SchemaImplementors = []string{\"__Schema\"}\n\nfunc (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Schema\")\n\t\tcase \"description\":\n\n\t\t\tout.Values[i] = ec.___Schema_description(ctx, field, obj)\n\n\t\tcase \"types\":\n\n\t\t\tout.Values[i] = ec.___Schema_types(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"queryType\":\n\n\t\t\tout.Values[i] = ec.___Schema_queryType(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"mutationType\":\n\n\t\t\tout.Values[i] = ec.___Schema_mutationType(ctx, field, obj)\n\n\t\tcase \"subscriptionType\":\n\n\t\t\tout.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)\n\n\t\tcase \"directives\":\n\n\t\t\tout.Values[i] = ec.___Schema_directives(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\nvar __TypeImplementors = []string{\"__Type\"}\n\nfunc (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {\n\tfields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)\n\tout := graphql.NewFieldSet(fields)\n\tvar invalids uint32\n\tfor i, field := range fields {\n\t\tswitch field.Name {\n\t\tcase \"__typename\":\n\t\t\tout.Values[i] = graphql.MarshalString(\"__Type\")\n\t\tcase \"kind\":\n\n\t\t\tout.Values[i] = ec.___Type_kind(ctx, field, obj)\n\n\t\t\tif out.Values[i] == graphql.Null {\n\t\t\t\tinvalids++\n\t\t\t}\n\t\tcase \"name\":\n\n\t\t\tout.Values[i] = ec.___Type_name(ctx, field, obj)\n\n\t\tcase \"description\":\n\n\t\t\tout.Values[i] = ec.___Type_description(ctx, field, obj)\n\n\t\tcase \"fields\":\n\n\t\t\tout.Values[i] = ec.___Type_fields(ctx, field, obj)\n\n\t\tcase \"interfaces\":\n\n\t\t\tout.Values[i] = ec.___Type_interfaces(ctx, field, obj)\n\n\t\tcase \"possibleTypes\":\n\n\t\t\tout.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)\n\n\t\tcase \"enumValues\":\n\n\t\t\tout.Values[i] = ec.___Type_enumValues(ctx, field, obj)\n\n\t\tcase \"inputFields\":\n\n\t\t\tout.Values[i] = ec.___Type_inputFields(ctx, field, obj)\n\n\t\tcase \"ofType\":\n\n\t\t\tout.Values[i] = ec.___Type_ofType(ctx, field, obj)\n\n\t\tcase \"specifiedByURL\":\n\n\t\t\tout.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)\n\n\t\tdefault:\n\t\t\tpanic(\"unknown field \" + strconv.Quote(field.Name))\n\t\t}\n\t}\n\tout.Dispatch()\n\tif invalids \u003e 0 {\n\t\treturn graphql.Null\n\t}\n\treturn out\n}\n\n// endregion **************************** object.gotpl ****************************\n\n// region    ***************************** type.gotpl *****************************\n\nfunc (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {\n\tres, err := graphql.UnmarshalBoolean(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {\n\tres := graphql.MarshalBoolean(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}\n\nfunc (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {\n\tres, err := graphql.UnmarshalID(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalID(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}\n\nfunc (ec *executionContext) unmarshalNNewTodo2githubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐNewTodo(ctx context.Context, v interface{}) (model.NewTodo, error) {\n\tres, err := ec.unmarshalInputNewTodo(ctx, v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {\n\tres, err := graphql.UnmarshalString(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalString(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}\n\nfunc (ec *executionContext) marshalNTodo2githubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐTodo(ctx context.Context, sel ast.SelectionSet, v model.Todo) graphql.Marshaler {\n\treturn ec._Todo(ctx, sel, \u0026v)\n}\n\nfunc (ec *executionContext) marshalNTodo2ᚕᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐTodoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Todo) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalNTodo2ᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐTodo(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalNTodo2ᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐTodo(ctx context.Context, sel ast.SelectionSet, v *model.Todo) graphql.Marshaler {\n\tif v == nil {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\treturn ec._Todo(ctx, sel, v)\n}\n\nfunc (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋrichardimaokaᚋgqlgensandboxᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {\n\tif v == nil {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\treturn ec._User(ctx, sel, v)\n}\n\nfunc (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {\n\treturn ec.___Directive(ctx, sel, \u0026v)\n}\n\nfunc (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {\n\tres, err := graphql.UnmarshalString(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalString(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}\n\nfunc (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {\n\tvar vSlice []interface{}\n\tif v != nil {\n\t\tvSlice = graphql.CoerceList(v)\n\t}\n\tvar err error\n\tres := make([]string, len(vSlice))\n\tfor i := range vSlice {\n\t\tctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))\n\t\tres[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn res, nil\n}\n\nfunc (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {\n\treturn ec.___EnumValue(ctx, sel, \u0026v)\n}\n\nfunc (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {\n\treturn ec.___Field(ctx, sel, \u0026v)\n}\n\nfunc (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {\n\treturn ec.___InputValue(ctx, sel, \u0026v)\n}\n\nfunc (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {\n\treturn ec.___Type(ctx, sel, \u0026v)\n}\n\nfunc (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {\n\tif v == nil {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t\treturn graphql.Null\n\t}\n\treturn ec.___Type(ctx, sel, v)\n}\n\nfunc (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {\n\tres, err := graphql.UnmarshalString(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {\n\tres := graphql.MarshalString(v)\n\tif res == graphql.Null {\n\t\tif !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {\n\t\t\tec.Errorf(ctx, \"the requested element is null which the schema does not allow\")\n\t\t}\n\t}\n\treturn res\n}\n\nfunc (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {\n\tres, err := graphql.UnmarshalBoolean(v)\n\treturn res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {\n\tres := graphql.MarshalBoolean(v)\n\treturn res\n}\n\nfunc (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {\n\tif v == nil {\n\t\treturn nil, nil\n\t}\n\tres, err := graphql.UnmarshalBoolean(v)\n\treturn \u0026res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tres := graphql.MarshalBoolean(*v)\n\treturn res\n}\n\nfunc (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {\n\tif v == nil {\n\t\treturn nil, nil\n\t}\n\tres, err := graphql.UnmarshalString(v)\n\treturn \u0026res, graphql.ErrorOnPath(ctx, err)\n}\n\nfunc (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tres := graphql.MarshalString(*v)\n\treturn res\n}\n\nfunc (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\treturn ec.___Schema(ctx, sel, v)\n}\n\nfunc (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\tret := make(graphql.Array, len(v))\n\tvar wg sync.WaitGroup\n\tisLen1 := len(v) == 1\n\tif !isLen1 {\n\t\twg.Add(len(v))\n\t}\n\tfor i := range v {\n\t\ti := i\n\t\tfc := \u0026graphql.FieldContext{\n\t\t\tIndex:  \u0026i,\n\t\t\tResult: \u0026v[i],\n\t\t}\n\t\tctx := graphql.WithFieldContext(ctx, fc)\n\t\tf := func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r != nil {\n\t\t\t\t\tec.Error(ctx, ec.Recover(ctx, r))\n\t\t\t\t\tret = nil\n\t\t\t\t}\n\t\t\t}()\n\t\t\tif !isLen1 {\n\t\t\t\tdefer wg.Done()\n\t\t\t}\n\t\t\tret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])\n\t\t}\n\t\tif isLen1 {\n\t\t\tf(i)\n\t\t} else {\n\t\t\tgo f(i)\n\t\t}\n\n\t}\n\twg.Wait()\n\n\tfor _, e := range ret {\n\t\tif e == graphql.Null {\n\t\t\treturn graphql.Null\n\t\t}\n\t}\n\n\treturn ret\n}\n\nfunc (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {\n\tif v == nil {\n\t\treturn graphql.Null\n\t}\n\treturn ec.___Type(ctx, sel, v)\n}\n\n// endregion ***************************** type.gotpl *****************************\n",
      "isFullContent": true,
      "language": "go",
      "highlight": null
    },
    "graph/model/models_gen.go": {
      "filePath": "graph/model/models_gen.go",
      "fileName": "models_gen.go",
      "content": "// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.\n\npackage model\n\ntype NewTodo struct {\n\tText   string `json:\"text\"`\n\tUserID string `json:\"userId\"`\n}\n\ntype Todo struct {\n\tID   string `json:\"id\"`\n\tText string `json:\"text\"`\n\tDone bool   `json:\"done\"`\n\tUser *User  `json:\"user\"`\n}\n\ntype User struct {\n\tID   string `json:\"id\"`\n\tName string `json:\"name\"`\n}\n",
      "isFullContent": true,
      "language": "go",
      "highlight": null
    },
    "graph/resolver.go": {
      "filePath": "graph/resolver.go",
      "fileName": "resolver.go",
      "content": "package graph\n\n// This file will not be regenerated automatically.\n//\n// It serves as dependency injection for your app, add any dependencies you require here.\n\ntype Resolver struct{}\n",
      "isFullContent": true,
      "language": "go",
      "highlight": null
    },
    "graph/schema.graphqls": {
      "filePath": "graph/schema.graphqls",
      "fileName": "schema.graphqls",
      "content": "# GraphQL schema example\n#\n# https://gqlgen.com/getting-started/\n\ntype Todo {\n  id: ID!\n  text: String!\n  done: Boolean!\n  user: User!\n}\n\ntype User {\n  id: ID!\n  name: String!\n}\n\ntype Query {\n  todos: [Todo!]!\n}\n\ninput NewTodo {\n  text: String!\n  userId: String!\n}\n\ntype Mutation {\n  createTodo(input: NewTodo!): Todo!\n}\n",
      "isFullContent": true,
      "language": null,
      "highlight": null
    },
    "graph/schema.resolvers.go": {
      "filePath": "graph/schema.resolvers.go",
      "fileName": "schema.resolvers.go",
      "content": "package graph\n\n// This file will be automatically regenerated based on the schema, any resolver implementations\n// will be copied through when generating and any unknown code will be moved to the end.\n// Code generated by github.com/99designs/gqlgen version v0.17.30\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/richardimaoka/gqlgensandbox/graph/model\"\n)\n\n// CreateTodo is the resolver for the createTodo field.\nfunc (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {\n\tpanic(fmt.Errorf(\"not implemented: CreateTodo - createTodo\"))\n}\n\n// Todos is the resolver for the todos field.\nfunc (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {\n\tpanic(fmt.Errorf(\"not implemented: Todos - todos\"))\n}\n\n// Mutation returns MutationResolver implementation.\nfunc (r *Resolver) Mutation() MutationResolver { return \u0026mutationResolver{r} }\n\n// Query returns QueryResolver implementation.\nfunc (r *Resolver) Query() QueryResolver { return \u0026queryResolver{r} }\n\ntype mutationResolver struct{ *Resolver }\ntype queryResolver struct{ *Resolver }\n",
      "isFullContent": true,
      "language": "go",
      "highlight": null
    },
    "middleware.go": {
      "filePath": "middleware.go",
      "fileName": "middleware.go",
      "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\n// definition of a function in Func type\nfunc Middleware(h http.Handler) http.Handler {\n\t// using http.HandlerFunc, you can create http.Handler from a function\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tauthorization := r.Header.Get(\"Authorization\")\n\t\tfmt.Println(\"Authorization: \", authorization)\n\n\t\th.ServeHTTP(w, r)\n\t})\n}\n",
      "isFullContent": true,
      "language": "go",
      "highlight": null
    },
    "schema.graphql": {
      "filePath": "schema.graphql",
      "fileName": "schema.graphql",
      "content": "schema {\n  query: MyQuery\n  mutation: MyMutation\n}\n\ntype MyQuery {\n  todo(id: ID!): Todo\n  lastTodo: Todo\n  todos: [Todo!]!\n}\n\ntype MyMutation {\n  createTodo(todo: TodoInput!): Todo!\n  updateTodo(id: ID!, changes: Map!): Todo\n}\n\ntype Todo {\n  id: ID!\n  text: String!\n  done: Boolean! @hasRole(role: OWNER) # only the owner can see if a todo is done\n}\n\n\"Passed to createTodo to create a new todo\"\ninput TodoInput {\n  \"The body text\"\n  text: String!\n  \"Is it done already?\"\n  done: Boolean\n}\n\nscalar Map\n\n\"Prevents access to a field if the user doesnt have the matching role\"\ndirective @hasRole(role: Role!) on FIELD_DEFINITION\ndirective @user(id: ID!) on MUTATION | QUERY | FIELD\n\nenum Role {\n  ADMIN\n  OWNER\n}\n",
      "isFullContent": true,
      "language": "graphql",
      "highlight": null
    },
    "server.go": {
      "filePath": "server.go",
      "fileName": "server.go",
      "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/99designs/gqlgen/graphql/handler\"\n\t\"github.com/99designs/gqlgen/graphql/playground\"\n\t\"github.com/richardimaoka/gqlgensandbox/graph\"\n)\n\nconst defaultPort = \"8080\"\n\n// receive http.Handler and return http.Handler\nfunc Middleware(graphQLHandler http.Handler) http.Handler {\n\t// using http.HandlerFunc, you can create http.Handler from a function\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tauthorization := r.Header.Get(\"Authorization\")\n\t\tfmt.Printf(\"Authorization: `%s`\\n\", authorization)\n\n\t\tif authorization != \"correct token\" {\n\t\t\thttp.Error(w, \"unauthorized\", http.StatusUnauthorized)\n\t\t} else {\n\t\t\tgraphQLHandler.ServeHTTP(w, r)\n\t\t}\n\t})\n}\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = defaultPort\n\t}\n\n\tsrv := handler.NewDefaultServer(graph.NewExecutableSchema(graph.Config{Resolvers: \u0026graph.Resolver{}}))\n\n\thttp.Handle(\"/\", Middleware(playground.Handler(\"GraphQL playground\", \"/query\")))\n\thttp.Handle(\"/query\", Middleware(srv))\n\n\tlog.Printf(\"connect to http://localhost:%s/ for GraphQL playground\", port)\n\tlog.Fatal(http.ListenAndServe(\":\"+port, nil))\n}\n",
      "isFullContent": true,
      "language": "go",
      "highlight": [
        {
          "fromLine": 21,
          "toLine": 21
        },
        {
          "fromLine": 23,
          "toLine": 23
        }
      ]
    },
    "tools.go": {
      "filePath": "tools.go",
      "fileName": "tools.go",
      "content": "//go:build tools\n// +build tools\n\npackage tools\n\nimport (\n\t_ \"github.com/99designs/gqlgen\"\n)\n",
      "isFullContent": true,
      "language": "go",
      "highlight": null
    }
  }
}